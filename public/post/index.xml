<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Projects on AMPONSAH MICHAEL</title>
    <link>https://Platini983.github.io/Platini_Portfolio/post/</link>
    <description>Recent content in Projects on AMPONSAH MICHAEL</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 02 Mar 2017 12:00:00 -0500</lastBuildDate><atom:link href="https://Platini983.github.io/Platini_Portfolio/post/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Project 2: End To End Emotion Classifier</title>
      <link>https://Platini983.github.io/Platini_Portfolio/post/project-2/</link>
      <pubDate>Mon, 10 Apr 2017 11:00:59 -0400</pubDate>
      
      <guid>https://Platini983.github.io/Platini_Portfolio/post/project-2/</guid>
      <description>For this example project is a Emotion classifier to predict the emotion from text. This could be useful for someone who is new to NLP from a certain country. A model was build using LogisticRegression pipeline. The model was imported using Joblib and the main application was build using streamlit.
I was able to get the model to predict the emotion of someone text with 62% accuracy after minimal tuning. For most of the cases this would meet the need of an end user of the app.</description>
    </item>
    
    <item>
      <title>Project 1: Data Science Salary Estimator</title>
      <link>https://Platini983.github.io/Platini_Portfolio/post/project-1/</link>
      <pubDate>Sun, 09 Apr 2017 10:58:08 -0400</pubDate>
      
      <guid>https://Platini983.github.io/Platini_Portfolio/post/project-1/</guid>
      <description>Created a tool that estimates data science salaries (MAE ~ $ 11K) to help data scientists negotiate their income when they get a job. Scraped over 1000 job descriptions from glassdoor using python and selenium Engineered features from the text of each job description to quantify the value companies put on python, excel, aws, and spark. Optimized Linear, Lasso, and Random Forest Regressors using GridsearchCV to reach the best model.</description>
    </item>
    
  </channel>
</rss>
